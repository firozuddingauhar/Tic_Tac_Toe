// int minimaxBot(char board[9], int depth, char maximizingPlayer)
// {
//     int bestscore, i, score;
//     if (depth == 0 || checkwin(board, 'X') == 1 || checkwin(board, 'O'))
//     {
//         if (checkwin(board, 'X') == 1)
//         {
//             return 1;
//         }
//         else if (checkwin(board, 'O') == 1)
//         {
//             return -1;
//         }
//         else
//         {
//             return 0;
//         }
//     }

//     if (maximizingPlayer == 'X')
//     {
//         bestscore = -800;
//         for (i = 0; i < 9; i++)
//         {
//             if (board[i] == '.')
//             {
//                 board[i] = 'X';
//                 score = minimaxBot(board, depth-1 ,'O');
//                 board[i] = '.';
//                 if (score > bestscore)
//                 {
//                     bestscore = score;
//                 }
//             }
//         }
//         return bestscore;
//     }
//     else
//     {
//         bestscore = 800;
//         for (i = 0; i < 9; i++)
//         {
//             if (board[i] == '.')
//             {
//                 board[i] = 'O';
//                 score = minimaxBot(board, depth-1 , 'X');
//                 board[i] = '.';
//                 if (score < bestscore)
//                 {
//                     bestscore = score;
//                 }
//             }
//         }
//         return bestscore;
//     }
// }

// void MinimaxbotMove(char board[9])
// {

//     int i, score = 0, bestMove = 0, bestScore = -800;

//     for (i = 0; i < 9; i++)
//     {
//         if (board[i] == '.')
//         {
//             board[i] == 'X';
//             score = minimaxBot(board, 9,'O');
//             board[i] == '.';
//             if (score > bestScore)
//             {
//                 bestScore = score;
//                 bestMove = i;
//             }
//         }
//     }

//     board[bestMove] = 'X';
//     checkwin(board, 'X');
// }



// int RandombotMove(char board[9])
// {
//     srand(time(0));
//     int i, num = (rand() % (9));

//         if (board[num] == '.')
//         {
//             return num;
//         }
//         else{
//             botMove(board);
//         }
// }




XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX




// int minimax(int board[9], int player) {
//     //How is the position like for player (their turn) on board?
//     int winner = win(board);
//     if(winner != 0) return winner*player;

//     int move = -1;
//     int score = -2;//Losing moves are preferred to no move
//     int i;
//     for(i = 0; i < 9; ++i) {//For all moves,
//         if(board[i] == 0) {//If legal,
//             board[i] = player;//Try the move
//             int thisScore = -minimax(board, player*-1);
//             if(thisScore > score) {
//                 score = thisScore;
//                 move = i;
//             }//Pick the one that's worst for the opponent
//             board[i] = 0;//Reset board after try
//         }
//     }
//     if(move == -1) return 0;
//     return score;
// }

// void computerMove(int board[9]) {
//     int move = -1;
//     int score = -2;
//     int i;
//     for(i = 0; i < 9; ++i) {
//         if(board[i] == 0) {
//             board[i] = 1;
//             int tempScore = -minimax(board, -1);
//             board[i] = 0;
//             if(tempScore > score) {
//                 score = tempScore;
//                 move = i;
//             }
//         }
//     }
//     //returns a score based on minimax tree at a given node.
//     board[move] = 1;
// }

